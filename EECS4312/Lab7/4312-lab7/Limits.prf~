(Limits_Alarm1
 (high_alarm_req_TCC1 0
  (high_alarm_req_TCC1-1 nil 3656946716 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (DTIME type-eq-decl nil Time nil)
    (delta formal-const-decl "posreal" Limits_Alarm1 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (env_1 const-decl "bool" Limits_Alarm1 nil)
    (env_2 const-decl "bool" Limits_Alarm1 nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (high_alarm_req_TCC2 0
  (high_alarm_req_TCC2-1 nil 3656946716
   ("" (cond-disjoint-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (DTIME type-eq-decl nil Time nil)
    (delta formal-const-decl "posreal" Limits_Alarm1 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (env_1 const-decl "bool" Limits_Alarm1 nil)
    (env_2 const-decl "bool" Limits_Alarm1 nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (high_alarm_req_TCC3 0
  (high_alarm_req_TCC3-1 nil 3656946716
   ("" (cond-coverage-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (DTIME type-eq-decl nil Time nil)
    (delta formal-const-decl "posreal" Limits_Alarm1 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (env_1 const-decl "bool" Limits_Alarm1 nil)
    (env_2 const-decl "bool" Limits_Alarm1 nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (high_alarm_req_TCC4 0
  (high_alarm_req_TCC4-1 nil 3656946716
   ("" (cond-disjoint-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (DTIME type-eq-decl nil Time nil)
    (delta formal-const-decl "posreal" Limits_Alarm1 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (env_1 const-decl "bool" Limits_Alarm1 nil)
    (env_2 const-decl "bool" Limits_Alarm1 nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (high_alarm_req_TCC5 0
  (high_alarm_req_TCC5-1 nil 3656946716
   ("" (cond-coverage-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (DTIME type-eq-decl nil Time nil)
    (delta formal-const-decl "posreal" Limits_Alarm1 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (env_1 const-decl "bool" Limits_Alarm1 nil)
    (env_2 const-decl "bool" Limits_Alarm1 nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (low_alarm_req_TCC1 0
  (low_alarm_req_TCC1-1 nil 3656946716 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (DTIME type-eq-decl nil Time nil)
    (delta formal-const-decl "posreal" Limits_Alarm1 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (env_1 const-decl "bool" Limits_Alarm1 nil)
    (env_2 const-decl "bool" Limits_Alarm1 nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (low_alarm_req_TCC2 0
  (low_alarm_req_TCC2-1 nil 3656946716 ("" (cond-disjoint-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (DTIME type-eq-decl nil Time nil)
    (delta formal-const-decl "posreal" Limits_Alarm1 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (env_1 const-decl "bool" Limits_Alarm1 nil)
    (env_2 const-decl "bool" Limits_Alarm1 nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (low_alarm_req_TCC3 0
  (low_alarm_req_TCC3-1 nil 3656946716 ("" (cond-coverage-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (DTIME type-eq-decl nil Time nil)
    (delta formal-const-decl "posreal" Limits_Alarm1 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (env_1 const-decl "bool" Limits_Alarm1 nil)
    (env_2 const-decl "bool" Limits_Alarm1 nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (correct_limits_alarm_fbd 0
  (correct_limits_alarm_fbd-1 nil 3656947172
   ("" (grind)
    (("1" (postpone) nil nil) ("2" (postpone) nil nil)
     ("3" (postpone) nil nil) ("4" (postpone) nil nil)
     ("5" (postpone) nil nil) ("6" (postpone) nil nil)
     ("7" (postpone) nil nil) ("8" (postpone) nil nil)
     ("9" (postpone) nil nil) ("10" (postpone) nil nil)
     ("11" (postpone) nil nil) ("12" (postpone) nil nil)
     ("13" (postpone) nil nil) ("14" (postpone) nil nil)
     ("15" (postpone) nil nil) ("16" (postpone) nil nil)
     ("17" (postpone) nil nil) ("18" (postpone) nil nil)
     ("19" (postpone) nil nil) ("20" (postpone) nil nil)
     ("21" (postpone) nil nil) ("22" (postpone) nil nil)
     ("23" (postpone) nil nil) ("24" (postpone) nil nil)
     ("25" (postpone) nil nil) ("26" (postpone) nil nil)
     ("27" (postpone) nil nil) ("28" (postpone) nil nil)
     ("29" (postpone) nil nil) ("30" (postpone) nil nil)
     ("31" (postpone) nil nil) ("32" (postpone) nil nil)
     ("33" (postpone) nil nil) ("34" (postpone) nil nil)
     ("35" (postpone) nil nil) ("36" (postpone) nil nil)
     ("37" (postpone) nil nil) ("38" (postpone) nil nil)
     ("39" (postpone) nil nil) ("40" (postpone) nil nil)
     ("41" (postpone) nil nil) ("42" (postpone) nil nil)
     ("43" (postpone) nil nil) ("44" (postpone) nil nil)
     ("45" (postpone) nil nil) ("46" (postpone) nil nil)
     ("47" (postpone) nil nil) ("48" (postpone) nil nil)
     ("49" (postpone) nil nil) ("50" (postpone) nil nil)
     ("51" (postpone) nil nil) ("52" (postpone) nil nil)
     ("53" (postpone) nil nil) ("54" (postpone) nil nil)
     ("55" (postpone) nil nil) ("56" (postpone) nil nil)
     ("57" (postpone) nil nil) ("58" (postpone) nil nil)
     ("59" (postpone) nil nil) ("60" (postpone) nil nil)
     ("61" (postpone) nil nil) ("62" (postpone) nil nil)
     ("63" (postpone) nil nil) ("64" (postpone) nil nil)
     ("65" (postpone) nil nil) ("66" (postpone) nil nil)
     ("67" (postpone) nil nil) ("68" (postpone) nil nil)
     ("69" (postpone) nil nil) ("70" (postpone) nil nil)
     ("71" (postpone) nil nil) ("72" (postpone) nil nil)
     ("73" (postpone) nil nil) ("74" (postpone) nil nil)
     ("75" (postpone) nil nil) ("76" (postpone) nil nil)
     ("77" (postpone) nil nil) ("78" (postpone) nil nil)
     ("79" (postpone) nil nil) ("80" (postpone) nil nil)
     ("81" (postpone) nil nil) ("82" (postpone) nil nil)
     ("83" (postpone) nil nil) ("84" (postpone) nil nil)
     ("85" (postpone) nil nil) ("86" (postpone) nil nil)
     ("87" (postpone) nil nil))
    nil)
   nil shostak))
 (req_entails_inv 0
  (req_entails_inv-1 nil 3656971429
   ("" (expand "no_simultaneous_alarms")
    (("" (expand "limits_alarm_req")
      (("" (expand "gte_one")
        (("" (expand "high_alarm_req")
          (("" (expand "low_alarm_req")
            (("" (skeep)
              (("" (induct i)
                (("1" (inst -6 0)
                  (("1" (expand "env_1")
                    (("1" (expand "env_2")
                      (("1" (bddsimp)
                        (("1" (inst -3 0)
                          (("1" (inst -4 0)
                            (("1" (inst -5 0) (("1" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep) (("2" (postpone) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (postpone) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

