Limits_Alarm1[delta: posreal]: THEORY
 BEGIN

  IMPORTING Time[delta]

  IMPORTING Hysteresis[delta]

  % monitored variables
  H: VAR [DTIME -> real]
  X: VAR [DTIME -> real]
  L: VAR [DTIME -> real]
  X1: VAR [DTIME -> real]
  X2: VAR [DTIME -> real]
  EPS: VAR [DTIME -> real]
  % ACTUAL_EPS: VAR [DTIME -> real]

  % controlled variables
  QH: VAR [DTIME -> BOOL]
  Q: VAR [DTIME -> BOOL]
  QL: VAR [DTIME -> BOOL]

 
  r1, r2, r3 : VAR [DTIME -> real]
  nzr : VAR [DTIME -> {r: real | r /= 0}]
  b1, b2, b3 : VAR [DTIME -> BOOL]

  % basic functions for the FBD implementation
  minus(r1, r2, r3) : bool = FORALL (i: DTIME): r3(i) = r1(i) - r2(i)
 
  plus(r1, r2, r3) : bool =  FORALL (i: DTIME): r3(i) = r1(i) + r2(i)
 
  divide (r1, nzr, r3): bool = FORALL (i: DTIME): r3(i) = r1(i) / nzr(i)
 
  gte_one (b1, b2, b3) : bool =  FORALL (i: DTIME):b3(i) = IF b1(i) + b2(i) >= 1  THEN 1 ELSE 0 ENDIF


  % FBD implementation of the LIMITS_ALARM block
  limits_alarm_fbd (H, X, L, EPS, QH, Q, QL): bool = 
  EXISTS (w1, w2, w3 : [DTIME  -> real]):
  divide (EPS, (LAMBDA (i: DTIME): 2.0), w1) 
  AND minus(H, w1, w2)
  AND plus(L, w1, w3)
  AND hysteresis_req (X, w2, w1, QH)
  AND hysteresis_req (X, w3, w1, QL)
  AND gte_one (QH , QL, Q)

  % old environmental assumption
  env_1 (H, X, L, EPS): bool = FORALL (i: DTIME): EPS(i) > 0

  % new environmental assumption for REQUIREMENTS implementation.
  env_2(H, X, L, EPS): bool = FORALL (i: DTIME): H(i)- (EPS(i)/2) > L(i) + (EPS(i)/2)
  
  % other REQUIREMENTS implementation constructs
  high_alarm_req (H, X, L, EPS, QH): bool = 
  env_1 (H, X, L, EPS) AND env_2 (H, X, L, EPS) IMPLIES 
   FORALL(i: DTIME):
      	COND
	  i = 0 -> QH(0) = 0,
	  i > 0 ->
	    COND X(i) < (H(i) - EPS(i)/2) -> QH(i) = 0,
	    	 (H(i)-EPS(i)/2) <= X(i) AND X(i) <= H(i) -> QH(i) = QH(i - 1),
		 X(i) > H(i) -> QH(i) = 1
	    ENDCOND
	ENDCOND

  low_alarm_req (H, L, X, EPS, QL): bool =
  (env_1 (H, X, L, EPS) AND env_2 (H, X, L, EPS)) IMPLIES 
   FORALL(i: DTIME):
      	COND
	  i = 0 -> QL(0) = 0,
	  i > 0 ->
	    COND X(i) > (L(i) + EPS(i)/2) -> QL(i) = 0,
	    	 L(i) <= X(i) AND X(i) <= (L(i) + EPS(i)/2) -> QL(i) = QL(i - 1),
		 X(i) < L(i) -> QL(i) = 1
	    ENDCOND
	ENDCOND 

  % Limits_alarm requirement implementation
  limits_alarm_req (H, X, L, EPS, QH, Q, QL): bool = 
  high_alarm_req (H, X, L, EPS, QH) AND low_alarm_req (H, X, L, EPS, QL) AND gte_one (QH, QL, Q)
  
  no_simultaneous_alarms (QH, Q, QL): bool =
  FORALL (i: DTIME): NOT( QH(i) = 1 AND QL(i) = 1)

  correct_limits_alarm_fbd : THEOREM
  (env_1 (H, X, L, EPS) AND env_2(H, X, L, EPS) AND limits_alarm_fbd (H, X, L, EPS, QH, Q, QL))
  IMPLIES
  limits_alarm_req (H, X, L, EPS, QH, Q, QL)


 END Limits_Alarm1
