(set_ex
 (conj1 0
  (conj1-1 nil 3653770734
   ("" (expand "member")
    (("" (expand SET1) (("" (propax) nil nil)) nil)) nil)
   ((SET1 const-decl "set[RESOURCE]" set_ex nil)
    (member const-decl "bool" sets nil))
   shostak))
 (conj2 0
  (conj2-1 nil 3653770790
   ("" (expand SET1) (("" (propax) nil nil)) nil)
   ((SET1 const-decl "set[RESOURCE]" set_ex nil)) shostak))
 (conj3 0
  (conj3-1 nil 3653770802
   ("" (apply-extensionality)
    (("" (expand add)
      (("" (expand member)
        (("" (expand UNIVERSE)
          (("" (expand SET3)
            (("" (apply-extensionality)
              (("" (delete 2)
                (("" (delete 2)
                  (("" (flatten) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (r3 adt-constructor-decl "(r3?)" set_ex nil)
    (r3? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r2 adt-constructor-decl "(r2?)" set_ex nil)
    (r2? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r1 adt-constructor-decl "(r1?)" set_ex nil)
    (r1? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (r4? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r4 adt-constructor-decl "(r4?)" set_ex nil)
    (SET3 const-decl "set[RESOURCE]" set_ex nil)
    (UNIVERSE const-decl "set[RESOURCE]" set_ex nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RESOURCE type-decl nil set_ex nil))
   shostak))
 (conj4 0
  (conj4-1 nil 3653771669
   ("" (apply-extensionality)
    (("" (delete 2)
      (("" (expand remove)
        (("" (expand "member")
          (("" (expand "SET3")
            (("" (expand "SET1")
              (("" (iff)
                (("" (split)
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (split)
                        (("1" (assert) nil nil)
                         ("2" (flatten) nil nil))
                        nil)
                       ("2" (split)
                        (("1" (assert) nil nil)
                         ("2" (flatten) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (r3? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r3 adt-constructor-decl "(r3?)" set_ex nil)
    (SET3 const-decl "set[RESOURCE]" set_ex nil)
    (SET1 const-decl "set[RESOURCE]" set_ex nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RESOURCE type-decl nil set_ex nil))
   shostak))
 (conj5 0
  (conj5-1 nil 3653772056
   ("" (expand "UNIVERSE")
    (("" (expand "union")
      (("" (expand "member")
        (("" (expand "SET1")
          (("" (expand "SET2")
            (("" (assert)
              (("" (apply-extensionality)
                (("" (delete 2)
                  (("" (flatten) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (SET1 const-decl "set[RESOURCE]" set_ex nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (r1? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r1 adt-constructor-decl "(r1?)" set_ex nil)
    (r2? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r2 adt-constructor-decl "(r2?)" set_ex nil)
    (r3? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r3 adt-constructor-decl "(r3?)" set_ex nil)
    (r4? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r4 adt-constructor-decl "(r4?)" set_ex nil)
    (RESOURCE type-decl nil set_ex nil)
    (boolean nonempty-type-decl nil booleans nil)
    (SET2 const-decl "set[RESOURCE]" set_ex nil)
    (member const-decl "bool" sets nil)
    (UNIVERSE const-decl "set[RESOURCE]" set_ex nil))
   shostak))
 (conj6 0
  (conj6-1 nil 3653772155
   ("" (expand "intersection")
    (("" (expand "member")
      (("" (expand "SET1")
        (("" (expand "SET2")
          (("" (expand "emptyset")
            (("" (apply-extensionality)
              (("" (prop)
                (("1" (assert) nil nil)
                 ("2" (delete 1) (("2" (assert) nil nil)) nil)
                 ("3" (apply-extensionality) nil nil)
                 ("4" (apply-extensionality) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (SET2 const-decl "set[RESOURCE]" set_ex nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RESOURCE type-decl nil set_ex nil)
    (FALSE const-decl "bool" booleans nil)
    (r4 adt-constructor-decl "(r4?)" set_ex nil)
    (r4? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r3 adt-constructor-decl "(r3?)" set_ex nil)
    (r3? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r2 adt-constructor-decl "(r2?)" set_ex nil)
    (r2? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r1 adt-constructor-decl "(r1?)" set_ex nil)
    (r1? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (emptyset const-decl "set" sets nil)
    (SET1 const-decl "set[RESOURCE]" set_ex nil)
    (intersection const-decl "set" sets nil))
   shostak))
 (conj7 0
  (conj7-1 nil 3653772319
   ("" (expand "intersection")
    (("" (expand "member")
      (("" (expand "SET2")
        (("" (expand "SET3")
          (("" (expand "singleton")
            (("" (apply-extensionality)
              (("" (delete 2)
                (("" (iff)
                  (("" (split)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (split)
                        (("1" (assert) nil nil) ("2" (prop) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (SET3 const-decl "set[RESOURCE]" set_ex nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RESOURCE type-decl nil set_ex nil)
    (r2 adt-constructor-decl "(r2?)" set_ex nil)
    (r2? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r1 adt-constructor-decl "(r1?)" set_ex nil)
    (r1? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r4 adt-constructor-decl "(r4?)" set_ex nil)
    (r4? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r3 adt-constructor-decl "(r3?)" set_ex nil)
    (r3? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (singleton const-decl "(singleton?)" sets nil)
    (SET2 const-decl "set[RESOURCE]" set_ex nil)
    (intersection const-decl "set" sets nil))
   shostak))
 (conj8 0
  (conj8-1 nil 3653772851
   ("" (expand "remove")
    (("" (expand "member")
      (("" (expand "add")
        (("" (expand "member")
          (("" (expand "SET1")
            (("" (apply-extensionality)
              (("" (delete 2)
                (("" (iff)
                  (("" (split)
                    (("1" (flatten) (("1" (prop) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (split -1)
                        (("1" (split 1)
                          (("1" (assert) nil nil)
                           ("2" (flatten) nil nil))
                          nil)
                         ("2" (split 1)
                          (("1" (assert) nil nil)
                           ("2" (flatten) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RESOURCE type-decl nil set_ex nil)
    (r2 adt-constructor-decl "(r2?)" set_ex nil)
    (r2? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r1 adt-constructor-decl "(r1?)" set_ex nil)
    (r1? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (r3 adt-constructor-decl "(r3?)" set_ex nil)
    (r3? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (SET1 const-decl "set[RESOURCE]" set_ex nil)
    (add const-decl "(nonempty?)" sets nil)
    (remove const-decl "set" sets nil))
   shostak)))

